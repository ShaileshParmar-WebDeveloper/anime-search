{"version":3,"sources":["component/AnimeList.jsx","App.js","reportWebVitals.js","index.js"],"names":["AnimeList","apiData","status","message","results","className","map","i","title","image_url","score","url","src","alt","href","rel","target","apiRequest","search","a","api","fetch","then","res","json","App","useState","animeSearch","setanimeSearch","setApiData","gotData","setgotData","handleSubmite","event","preventDefault","data","onSubmit","type","value","onChange","e","placeholder","required","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPA0BeA,EA1BG,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACnB,GAAuB,MAAnBA,EAAQC,OACV,OAAO,6BAAKD,EAAQE,UACd,IACEC,EAAYH,EAAZG,QACR,OACE,qBAAKC,UAAU,kBAAf,SACGD,EAAQE,KAAI,WAAmCC,GAAnC,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,UAAWC,EAArB,EAAqBA,MAAOC,EAA5B,EAA4BA,IAA5B,OACX,sBAAaN,UAAU,aAAvB,UACE,qBAAKO,IAAKH,EAAWI,IAAKL,IAC1B,gCACE,4BAAIA,IACJ,wCAAWE,KACX,mBAAGL,UAAU,YAAb,SACE,mBAAGS,KAAMH,EAAKI,IAAI,aAAaC,OAAO,SAAtC,8BANIT,SCJdU,EAAU,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACXC,EADW,kDACsCF,GADtC,SAEJG,MAAMD,GAAKE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAFzB,mFAAH,sDAuCDC,MAlCf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,OAEiBF,mBAAS,IAF1B,mBAENzB,EAFM,KAEG4B,EAFH,OAGiBH,oBAAS,GAH1B,mBAGNI,EAHM,KAGGC,EAHH,KAKPC,EAAa,uCAAG,WAAOC,GAAP,eAAAd,EAAA,6DACpBc,EAAMC,iBADc,SAEDjB,EAAWU,GAAaL,MAAK,SAACC,GAAD,OAASA,KAFrC,OAEdY,EAFc,OAGpBN,EAAWM,GACXJ,GAAW,GAJS,2CAAH,sDAOnB,OACE,sBAAK1B,UAAU,MAAf,UACE,8CACA,uBAAM+B,SAAUJ,EAAe3B,UAAU,SAAzC,UACE,uBACEgC,KAAK,OACLC,MAAOX,EACPY,SAAU,SAACC,GAAD,OAAOZ,EAAeY,EAAExB,OAAOsB,QACzCG,YAAY,gCACZC,UAAQ,IAEV,2CAEDZ,EACC,cAAC,EAAD,CAAW7B,QAASA,IAEpB,qECzBO0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.37c69da2.chunk.js","sourcesContent":["const AnimeList = ({ apiData }) => {\r\n  if (apiData.status === 404) {\r\n    return <h1>{apiData.message}</h1>;\r\n  } else {\r\n    const { results } = apiData;\r\n    return (\r\n      <div className=\"anime_container\">\r\n        {results.map(({ title, image_url, score, url }, i) => (\r\n          <div key={i} className=\"anime_card\">\r\n            <img src={image_url} alt={title} />\r\n            <div>\r\n              <p>{title}</p>\r\n              <p>score: {score}</p>\r\n              <p className=\"know_more\">\r\n                <a href={url} rel=\"noreferrer\" target=\"_blank\">\r\n                  Know More\r\n                </a>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default AnimeList;\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport AnimeList from \"./component/AnimeList\";\n\nconst apiRequest = async (search) => {\n  const api = `https://api.jikan.moe/v3/search/anime?q=${search}`;\n  return await fetch(api).then((res) => res.json());\n};\n\nfunction App() {\n  const [animeSearch, setanimeSearch] = useState(\"\");\n  const [apiData, setApiData] = useState({});\n  const [gotData, setgotData] = useState(false);\n\n  const handleSubmite = async (event) => {\n    event.preventDefault();\n    const data = await apiRequest(animeSearch).then((res) => res);\n    setApiData(data);\n    setgotData(true);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Anime Search</h1>\n      <form onSubmit={handleSubmite} className=\"search\">\n        <input\n          type=\"text\"\n          value={animeSearch}\n          onChange={(e) => setanimeSearch(e.target.value)}\n          placeholder=\"search for anime, e.g Pokemon\"\n          required\n        />\n        <button>Go</button>\n      </form>\n      {gotData ? (\n        <AnimeList apiData={apiData} />\n      ) : (\n        <h2>Search for Anime to see results</h2>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}